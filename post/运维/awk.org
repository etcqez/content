---
title: "Awk"
date: 2023-03-03T11:11:19+08:00
summary: " "
categories: ["运维"]
tags: [""]
---

* 疑难解决
  1. grep含有没有高亮的匹配行
     - *单个字母加星,如r*​,会匹所有行,因为只有一个条件,即r出现0次或多次,没有匹配到的就是0次,满足匹配条件*
  2. 匹配完整单词: grep -E "^root\>" passwd
  3. 找出2,3位数: grep -E "\<[0-9]{2,3}\>" passwd
  4. *.*​不能匹配空行*
  5. 删除空行和注释行
     #+begin_src shell
     sed "/^;/d" /etc/php/apache2-php8.1/php.ini | sed "/^$/d"
     sed "/^;\|^$/d" /etc/php/apache2-php8.1/php.ini
     sed "/^\(;\|$\)/d" /etc/php/apache2-php8.1/php.ini
     #+end_src
  6. 注释1到3行:
     #+begin_src shell
     sed -r '1,3s/(^.)/#\1/' passwd
     #+end_src
  7. awk指定两个分割符
     #+begin_src shell
     awk -F "[ :]" '!/^$/{print $4}'
     # !/^$ 不输入空行

     awk -F: '$3>=1000{print $1,$(NF-1)}' /etc/passwd
     #+end_src
  8. {}命令行展开
     #+begin_src sh
     echo {1..5}
     echo {1..5..2}
     echo {a..z}
     #+end_src
  9. grep去除空行
     #+begin_src shell
     grep '^$' <file> -v
     #+end_src
* 正则表达式
*grep -E*
- *​ *前一个字符零次到多次*
  - 和linux的星不同, .*同linux的星
- \ 转义
- a{n,m} 匹配前一个字符最少n次,最多m次
- a{n,} 匹配前一个字符最少n次
- a{m} 匹配前一个字符最多m次
* grep
- 实战
  1. 找出以 *至少* 1个 *空白字符* 开头开头,后面是 *非空字符* 的行
     #+begin_src shell
# 1
grep "^[[:space:]].*" ety.org
# 2
grep -E "^[[:space:]]+[^[:space:]]" ety.org
     #+end_src
  2. 找出所有以I,i开头的行

     *(|)和[]在字符只有1个时有相同的含义*
     #+begin_src shell
grep -i "^i" *.org
grep -E "^(i|I)" *.org
grep "^[iI]" *.org
     #+end_src
  3. 找出所有函数名:
     #+begin_src shell
grep -E "[a-zA-Z]+\(\)" /etc/init.d/functions.sh
     #+end_src
  4. 找出用户名和shell相同的用户:
     #+begin_src shell
grep -E "^([^:]+\>).*\1$" /etc/passwd
     #+end_src

- 选项
  - -i ignorecase
  - -o 仅显示匹配到的字符串本身
  - -v -​-invert-match 显示不能被模式匹配到的行
  - -E 支持扩展正则
  - -n 显示行号
  - -q 静默模式,即不输入任何信息
  - -c 输出匹配的次数
  - -m 匹配几次就停止
  - -l 列出匹配的文件名

* sed
- 命令字符: a,d,i,p,s
- 匹配范围
  - 空地址 全文处理
  - 单地址 指定某一行
  - /pattern/ 被模式匹配到的每一行
  - 范围区间 10,20 10到20行, 10,+5 第10行向下5行
  - 步长 1~2,表示1,3,,5,7,9行, 2~2两个步长,表示2,4,6,10
- 多次编辑: sed -e "1p" -e "2p" passwd -n
  #+begin_src shell
# -e必须紧跟命令字符
sed -n -e "1p" -e "2p" passwd
sed -e "1p" -e "2p" -n passwd
  #+end_src
- 参数选项
  - -n 取消默认输出,常与*命令字符*p一起用
  - -i 写入文件
  - -e 多次编辑,不需要管道符了
  - -r 支持正则
- 实战
  #+begin_src shell
# 输出第1,3行:
sed -n '1,3p' passwd

# 过滤:
sed '/root/p' -n passwd

# 删除第一行,相当于vim的dd
sed '1d' passwd

# 向下追加,相当于vim的o
sed '1i test insert' passwd
# 添加多行,通过\n换行:
sed '1i test\nnow line' passwd

# 测试空地址:
sed 'a---------------' passwd

  #+end_src
* awk
- 注意事项
  - *awk用单引号,字符串用双引号*
  - 正则区间: awk '​//,//'
  - 指定两个分割符: =awk -F "[ :]" '!/^$/{print $4}'=
- 选项
  - -F 指定分割符
  - -v 定义或修改一个awk内部的变量
  - -f 从脚本文件读取awk命令
- 内置变量
  - $0 打印每列
  - FS 字段分隔符
  - OFS 输出字段分隔符
  - NR (Number of records) 记录数
  - NF (Number of fields) 字段数
  - RS 输入记录分隔符
  - ORS 输出记录分隔符
  - FNR 各文件分别的行号
  - FILENAME 当前文件名
  - ARGC 命令行参数个数
  - ARCV 数组,保存的是命令行所给定的各参数(0:awk, 1:file)
- 实战
  #+begin_src shell
# awk打印HelloWorld:
awk 'BEGIN{print "HelloWorld"}'

# 输出2和3列:
pp | awk '{print $2,$3}'
# 输出倒数第1列:
pp | awk '{print $NF}'

# 输出第1行:
awk 'NR==1{print}' passwd
# 输出1到3行:
awk 'NR==1,NR==3{print}' passwd

# 指定分割符:
awk -F : '{print $1}' passwd
# 等同:
awk -v FS=":" '{print $1}' passwd

# 给每行添加行号 (cat -n):
awk '{print NR,$0}' passwd
# 处理多个文件分别显示行号:
awk '{print FNR,$0}' passwd passwd

# 自定义变量:
awk -v name="evil520" 'BEGIN{print "我的名字是? ",name}'

# 过滤:
awk '/root/{print}' passwd
  #+end_src
- printf
  - 左对齐: %-20s
    #+begin_src shell
awk -F: '{printf "%-15s%s\n",$1,$NF}' passwd
    #+end_src
- awk的模式: < <= == != >= > ~(匹配正则) !~(不匹配正则)
  #+begin_src shell
# 输出1到3行:
awk 'NR==1,NR==3{print}' passwd
# 不输出第1行:
pp | awk 'NR!=1{print}' passwd
# 字段~正则,过滤以S开头的第5个字段
awk -F: '$5~/^S/{print}' passwd
  #+end_src
- 统计nginx日志
  #+begin_src shell
# 统计日志的访客ip数量
awk '{print $1}' access.log | sort -n | uniq | wc -l
# 查看访问最频繁的前10个ip
awk '{print $1}' access.log | sort -n | uniq -c | wc -l | sort -nr | head -10
  #+end_src
