---
title: "Mysql"
date: 2023-03-03T08:24:35+08:00
summary: " "
categories: ["运维"]
tags: [""]
---

* 常用命令
** 库管理
#+begin_src sql
1. 查看已有库
    show databases;
2. 创建库并指定字符集
    create database db2 default charset utf8mb4;
3. 查看当前所有库
    select database();
4. 切换库
    use 库名;
5. 查看库中已有表
    show tables;
6. 删除库
    drop database 库名;
#+end_src
** 表管理
#+begin_src sql
1. 创建表并指定字符集
    create table 表名(字段名 字段类型 xxx,)charset=utf8;
2. 查看创建表的语句(字符集,存储引擎)
    show create table 表名;
3. 查看表结构
    desc 表名;
4. 删除表
    drop table 表名1,表名2,表名3;
#+end_src
** 表记录管理
#+begin_src sql
1. 增
    insert into 表名(字段名) values(),();
2. 删
    delete from 表名 where 条件;
3. 改
    update 表名 set 字段名=值,字段名=值 where 条件;
4, 查
    select 字段名 from 表名 where;
#+end_src
** 表字段管理(alter table 表名)
#+begin_src sql
1. 增
    alter table 表名 add 字段名 字段类型 first | after 字段名;
2. 删
    alter table 表名 drop 字段名;
3. 改
    alter table 表名 modify 字段名 新类型;
4. 表重命名
    alter table 表名 rename 新表名
#+end_src
* 技巧
1. %和_是通配符
2. =show variables like 'skip_name';=
   - 查询变量, *mariadb无此变量*
   - =skip_name_resolve = on= 禁止主机名解析,建议使用
3. 查询3个字符的变量
   #+begin_src sql
   show variables like '___';
   #+end_src
4. 数据库存在也不会报错
   #+begin_src sql
create database if not exists db1;
drop database if exists db1;
   #+end_src
5. *查看默认字符集*
   #+begin_src sql
-- 查看DBMS的字符集
show variables like 'character_%';
-- 查看比较规则
show variables like 'collation_%';
   #+end_src
6. 脚本模式
   #+begin_src shell
 mysql -uroot -pf < /path/to/somefile.sql
 mysql> source somefile.sql
   #+end_src
7. 查询正在使用的数据库
    #+begin_src sql
select database();
-- 查看用户:
select user();
    #+end_src
* root@localhost
- root@localhost和root@127.0.0.1是不同账号
- 前者走socket,后者走tcp/ip
* 约束
- 主键约束
  #+begin_src sql
create table user(
             id int primary key auto_increment comment '主键',
             name varchar(10) not null unique comment '姓名',
             age int check ( age > 0 && age <= 120 ) comment '年龄',
             status char(1) default '1' comment '状态',
             gender char(1) comment '性别'
) comment '用户表';

  #+end_src

- 外键约束
  #+begin_src sql
alter table emp add constraint fk_emp_dept_id foreign key (dept_id) references dept(id);
  #+end_src
  - emp表的dept_id信赖dept表的id
  - 删除
    #+begin_src sql
alter table emp drop foreign key fk_emp_dept_id
    #+end_src
* 事务
- 查询
  #+begin_src sql
(root@localhost) [test]> select @@autocommit;
+--------------+
| @@autocommit |
+--------------+
|            1 |
+--------------+
1 row in set (0.00 sec)
  #+end_src
- set @@autocommit = 0;
  手动提交
  #+begin_src sql
set @@autocommit = 0;
commit;
-- 回滚事务
rollback;
  #+end_src
- start transaction;
- 事务隔离级别
  - 查询
    #+begin_src sql
    (root@localhost) [test]>  select @@transaction_isolation;
    +-------------------------+
    | @@transaction_isolation |
    +-------------------------+
    | REPEATABLE-READ         |
    +-------------------------+
    1 row in set (0.00 sec)
    #+end_src
  - set session transaction isolation level read_uncommitted;
* 日志
- 二进制日志
  *对库的修改*
  #+begin_src sql
(root@localhost) [(none)]> show variables like '%log_bin%';
+---------------------------------+---------------------------------+
| Variable_name                   | Value                           |
+---------------------------------+---------------------------------+
| log_bin                         | ON                              |
| log_bin_basename                | /var/lib/mysql/gentoo-bin       |
| log_bin_index                   | /var/lib/mysql/gentoo-bin.index |
| log_bin_trust_function_creators | OFF                             |
| log_bin_use_v1_row_events       | OFF                             |
| sql_log_bin                     | ON                              |
+---------------------------------+---------------------------------+
6 rows in set (0.00 sec)
  #+end_src
  - 查看日志格式
    #+begin_src sql
(root@localhost) [(none)]> show variables like '%binlog_format';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| binlog_format | ROW   |
+---------------+-------+
1 row in set (0.01 sec)
    #+end_src
  - mysqlbinlog gentoo-bin.000003 -v
    格式为ROW要加-v
  - 删除日志
    - reset master
      删除全部
    - purge master logs to 'binlog.***'
      删除***之前的所有日志
    - purge master logs before 'yyyy-mm-dd hh:mm:ss'
  - 过期时间
    #+begin_src sql
(root@localhost) [(none)]> show variables like '%binlog_expire%';
+-------------------------------+---------+
| Variable_name                 | Value   |
+-------------------------------+---------+
| binlog_expire_logs_auto_purge | ON      |
| binlog_expire_logs_seconds    | 2592000 |
+-------------------------------+---------+
2 rows in set (0.00 sec)
    #+end_src
    30天后会自动删除
- 查询日志
  *对库的查询*
  #+begin_src sql
(root@localhost) [(none)]> show variables like '%general%';
+------------------+---------------------------+
| Variable_name    | Value                     |
+------------------+---------------------------+
| general_log      | OFF                       |
| general_log_file | /var/lib/mysql/gentoo.log |
+------------------+---------------------------+
2 rows in set (0.00 sec)
  #+end_src
  *查询日志默认关闭*
- 慢查询日志
  - 开启慢查询
    #+begin_src cnf
#开启慢查询
slow_query_log=1
#慢查询时间参数
long_query_time=2
    #+end_src
* 主从复制
- 主库配置
  1. /etc/my.cnf
    #+begin_src cnf
server-id=1
read-only=0
    #+end_src
  2. 创建用户
     #+begin_src sql
create user 'f'@'%' identified with mysql_native_password by 'f';
     #+end_src
  3. 授于权限
     #+begin_src sql
grant replication slave on *.* to 'f'@'%';
     #+end_src
  4. 查看二进制日志坐标
     #+begin_src sql
show master status;
     #+end_src
- 从库配置
  1. /etc/my.cnf
    #+begin_src cnf
server-id=2
read-only=1
    #+end_src
  2. 8.0.23之前
     #+begin_src sql
change replication source to source_host='xxx.xxx',source_user='xxx',source_log_file='xxx',source_log_pos=xxx;
     #+end_src
     如果是8.0.23之前的版本,执行如下sql:
     #+begin_src sql
change replication master to master_host='xxx.xxx',master_user='xxx',master_log_file='xxx',master_log_pos=xxx;
     #+end_src
  3. 开启同步操作
     #+begin_src sql
start replica; #8.0.22之后
start slave; #8.0.22之前
     #+end_src
  4. 查看主从同步状态
     #+begin_src sql
start replica status\G; #8.0.22之后
start slave status\G; #8.0.22之前
     #+end_src
     - 查看replica_io_running和replica_sql_running是否为yes
