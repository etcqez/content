---
title: "IO多路复用"
date: 2023-03-20T18:31:17+08:00
summary: "解决客户端与服务器的阻塞问题"
categories: ["Python"]
tags: ["IO"]
---

* select
将套接字放入阻塞 =IO列表= (rlist),当阻塞IO收到请求时,返回列表,根据根据阻塞IO的类型,执行不同的逻辑处理
** 核心代码
#+BEGIN_SRC python :results output

# 将监听套接字放入读IO列表
rlist=[s]
wlist=[]
xlist=[]

    # 观察阻塞IO列表
    rs,ws,xs=select(rlist,wlist,xlist)

    for r in rs:
        if r is s:
            c,addr=r.accept()
            rlist.append(c)
        else:
            data=r.recv(1024).decode()

#+END_SRC

** 服务端
#+BEGIN_SRC python :results output
from socket import *
from select import select

s=socket()
s.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)
s.bind(('0.0.0.0',8888))
s.listen(3)

rlist=[s]
wlist=[]
xlist=[]

while True:
    rs,ws,xs=select(rlist,wlist,xlist)

    for r in rs:
        if r is s:
            c,addr=r.accept()
            print("Connect from",addr)
            rlist.append(c)
        else:
            # 有客户端发消息
            data=r.recv(1024).decode()
            # 客户端退出
            if not data:
                rlist.remove(r)
                r.close()
                continue
            print(data)


    for w in ws:
        pass

    for x in xs:
        pass

#+END_SRC

** 客户端
#+BEGIN_SRC python :results output
import socket

sockfd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

sockfd.connect(('127.0.0.1',8888))

# 发送
data=input('Msg>>')
sockfd.send(data.encode())
data=sockfd.recv(1024)
print("Server:",data.decode())

sockfd.close()


#+END_SRC
* poll
将要监控的IO =注册= (register),当收到消息时,返回 =(fd,event)=,再通过地图(fdmap)找到IO进行后续处理
** 核心代码
#+BEGIN_SRC python :results output
p=poll()

fdmap={s.fileno():s}

p.register(s,POLLIN|POLLERR)
    # 开启监控,返回的events是一个元组,第一项是IO的fileno,第二项是IO就绪的事件类型
    events=p.poll()
    for fd,event in events:
        if fd==s.fileno():

            c,addr=fdmap[fd].accept()
            p.register(c,POLLIN|POLLERR)
            fdmap[c.fileno()]=c # 维护字典
        elif event & POLLIN:
            data=fdmap[fd].recv(1024).decode()
#+END_SRC


** 服务端
#+BEGIN_SRC python :results output
from socket import *
from select import *

s=socket()
s.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)
s.bind(('0.0.0.0',8888))
s.listen(3)

p=poll()

# 建立查找字典，通过一个IO的fileno找到IO对象
# 始终根register的IO保持一致
fdmap={s.fileno():s}

# 关注s
p.register(s,POLLIN|POLLERR)

while True:
    # 阻塞等待客户端的连接
    events=p.poll()
    # 循环遍历列表，查看哪个IO就绪，进行处理
    for fd,event in events:
        # 区分哪个IO就绪
        if fd==s.fileno():
            c,addr=fdmap[fd].accept()
            print('Connetc from',addr)
            # 关注客户端链接套接字
            p.register(c,POLLIN|POLLERR)
            fdmap[c.fileno()]=c # 维护字典
        elif event & POLLIN:
            data=fdmap[fd].recv(1024).decode()
            if not data:
                p.unregister(fd)
                fdmap[fd].close()
                del fdmap[fd]
                continue
            print(data)
            fdmap[fd].send(b'OK')

#+END_SRC

** 客户端
#+BEGIN_SRC python :results output
import socket

sockfd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

sockfd.connect(('127.0.0.1',8888))

# 发送
data=input('Msg>>')
sockfd.send(data.encode())
data=sockfd.recv(1024)
print("Server:",data.decode())

sockfd.close()


#+END_SRC
* epoll
** 比较
1. IO多路复用是内核对IO的监控,select/poll会将所有IO copy 一份给操作系统内核,其中有一个IO发生了,操作系统会将所有监控的IO返回给应用层,再由应用层遍历
2. 一个register在内核开辟一份空间
*** EPOLLET 边缘触发
1. 水平触发: 对于已经就绪IO,未处理会一直提醒
2. 边缘触发: 下次再有IO就绪一起处理
